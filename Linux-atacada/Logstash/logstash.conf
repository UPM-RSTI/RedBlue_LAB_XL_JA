input {
  file {
  type => "sysmon"
  path => "/var/log/syslog"
  }

}

filter {
  grok {
    match => {
      "message" => [
        "%{MONTH:month} %{MONTHDAY:day} %{TIME:time} %{HOSTNAME:hostname} %{WORD:program}: <%{GREEDYDATA:event_data}>"
      ]
    }
  }
  date {
    match => ["@timestamp", "ISO8601"]
    target => "@timestamp"
  }
  
  mutate {
    gsub => [
      "event_data", "^", "<",
      "event_data", "$", ">"
    ]
  }
  
  xml {
    source => "event_data"
    store_xml => false
    target => "sysmonforlinux"
	xpath => [
  	"//Event/System/Provider/@Name", "log_type",
  	"//Event/System/Provider/@Guid", "process_guid",
  	"//Event/System/EventID/text()", "event_id",
  	"//Event/System/Opcode/text()", "op_code",
  	"//Event/System/Keywords/text()", "keywords",
  	"//Event/System/Channel/text()", "channel",
  	"//Event/System/Computer/text()", "host",
  	"//Event/EventData/Data[@Name='RuleName']/text()", "rule_name",
  	"//Event/EventData/Data[@Name='UtcTime']/text()", "UtcTime",
  	"//Event/EventData/Data[@Name='ProcessGuid']/text()", "ProcessGuid",
  	"//Event/EventData/Data[@Name='ProcessId']/text()", "ProcessId",
  	"//Event/EventData/Data[@Name='Image']/text()", "image",
  	"//Event/EventData/Data[@Name='CommandLine']/text()", "CommandLine",
  	"//Event/EventData/Data[@Name='User']/text()", "user",
  	"//Event/EventData/Data[@Name='Protocol']/text()", "Protocol",
  	"//Event/EventData/Data[@Name='Initiated']/text()", "Initiated",
  	"//Event/EventData/Data[@Name='SourceIsIpv6']/text()", "SourceIsIpv6",
  	"//Event/EventData/Data[@Name='SourceIp']/text()", "SourceIp",
  	"//Event/EventData/Data[@Name='SourceHostname']/text()", "SourceHostname",
  	"//Event/EventData/Data[@Name='SourcePort']/text()", "SourcePort",
  	"//Event/EventData/Data[@Name='SourcePortName']/text()", "SourcePortName",
  	"//Event/EventData/Data[@Name='DestinationIsIpv6']/text()", "DestinationIsIpv6",
  	"//Event/EventData/Data[@Name='DestinationIp']/text()", "DestinationIp",
  	"//Event/EventData/Data[@Name='DestinationHostname']/text()", "DestinationHostname",
  	"//Event/EventData/Data[@Name='DestinationPort']/text()", "DestinationPort",
  	"//Event/EventData/Data[@Name='DestinationPortName']/text()", "DestinationPortName",
  	"//Event/EventData/Data[@Name='Hashes']/text()", "Hashes",
  	"//Event/EventData/Data[@Name='LogonId']/text()", "LogonId",
  	"//Event/EventData/Data[@Name='LogonGuid']/text()", "LogonGuid",
  	"//Event/EventData/Data[@Name='TerminalSessionId']/text()", "TerminalSessionId",
  	"//Event/EventData/Data[@Name='IntegrityLevel']/text()", "IntegrityLevel",
  	"//Event/EventData/Data[@Name='ParentProcessGuid']/text()", "ParentProcessGuid",
  	"//Event/EventData/Data[@Name='ParentProcessId']/text()", "ParentProcessId",
  	"//Event/EventData/Data[@Name='ParentImage']/text()", "ParentImage",
  	"//Event/EventData/Data[@Name='TargetFilename']/text()", "TargetFilename",
  	"//Event/EventData/Data[@Name='CreationUtcTime']/text()", "CreationUtcTime",
  	"//Event/EventData/Data[@Name='ParentCommandLine']/text()", "ParentCommandLine"
	]

  }
ruby {
  code => '
    event.set("[data_model][fields][log_name]", event.get("[channel][0]")) unless event.get("[channel][0]").nil?
    event.set("[data_model][fields][utc_time]", event.get("[UtcTime][0]")) unless event.get("[UtcTime][0]").nil?
    event.set("[data_model][fields][image_path]", event.get("[image][0]")) unless event.get("[image][0]").nil?
    event.set("[data_model][fields][log_type]", event.get("[log_type][0]")) unless event.get("[log_type][0]").nil?
    event.set("[data_model][fields][process_guid]", event.get("[process_guid][0]")) unless event.get("[process_guid][0]").nil?
    event.set("[data_model][fields][event_code]", event.get("[event_id][0]")) unless event.get("[event_id][0]").nil?
    event.set("[data_model][fields][op_code]", event.get("[op_code][0]")) unless event.get("[op_code][0]").nil?
    event.set("[data_model][fields][keywords]", event.get("[keywords][0]")) unless event.get("[keywords][0]").nil?
    event.set("[data_model][fields][hostname]", event.get("[host][0]")) unless event.get("[host][0]").nil?
    event.set("[data_model][fields][pid]", event.get("[ProcessId][0]")) unless event.get("[ProcessId][0]").nil?
    event.set("[data_model][fields][command_line]", event.get("[CommandLine][0]")) unless event.get("[CommandLine][0]").nil?
    event.set("[data_model][fields][user]", event.get("[user][0]")) unless event.get("[user][0]").nil?
    event.set("[data_model][fields][transport]", event.get("[Protocol][0]")) unless event.get("[Protocol][0]").nil?
    event.set("[data_model][fields][initiated]", event.get("[Initiated][0]")) unless event.get("[Initiated][0]").nil?
    event.set("[data_model][fields][src_ipv6]", event.get("[SourceIsIpv6][0]")) unless event.get("[SourceIsIpv6][0]").nil?
    event.set("[data_model][fields][src_ip]", event.get("[SourceIp][0]")) unless event.get("[SourceIp][0]").nil?
    event.set("[data_model][fields][sourcehostname]", event.get("[SourceHostname][0]")) unless event.get("[SourceHostname][0]").nil?
    event.set("[data_model][fields][dest_ipv6]", event.get("[DestinationIsIpv6][0]")) unless event.get("[DestinationIsIpv6][0]").nil?
    event.set("[data_model][fields][dest_ip]", event.get("[DestinationIp][0]")) unless event.get("[DestinationIp][0]").nil?
    event.set("[data_model][fields][dest_fqdn]", event.get("[DestinationHostname][0]")) unless event.get("[DestinationHostname][0]").nil?
    event.set("[data_model][fields][dest_port]", event.get("[DestinationPort][0]")) unless event.get("[DestinationPort][0]").nil?
    event.set("[data_model][fields][dest_port_name]", event.get("[DestinationPortName][0]")) unless event.get("[DestinationPortName][0]").nil?
    event.set("[data_model][fields][hashes]", event.get("[Hashes][0]")) unless event.get("[Hashes][0]").nil?
    event.set("[data_model][fields][terminal_session_id]", event.get("[TerminalSessionId][0]")) unless event.get("[TerminalSessionId][0]").nil?
    event.set("[data_model][fields][integrity_level]", event.get("[IntegrityLevel][0]")) unless event.get("[IntegrityLevel][0]").nil?
    event.set("[data_model][fields][parent_process_guid]", event.get("[ParentProcessGuid][0]")) unless event.get("[ParentProcessGuid][0]").nil?
    event.set("[data_model][fields][ppid]", event.get("[ParentProcessId][0]")) unless event.get("[ParentProcessId][0]").nil?
    event.set("[data_model][fields][parent_image_path]", event.get("[ParentImage][0]")) unless event.get("[ParentImage][0]").nil?
    event.set("[data_model][fields][file_name]", event.get("[TargetFilename][0]")) unless event.get("[TargetFilename][0]").nil?
    event.set("[data_model][fields][creation_time]", event.get("[CreationUtcTime][0]")) unless event.get("[CreationUtcTime][0]").nil?
    event.set("[data_model][fields][terminal_session_id]", event.get("[ParentCommandLine][0]")) unless event.get("[ParentCommandLine][0]").nil?
  '
}
  
  if "[channel][0]" == "Linux-Sysmon/Operational" { 
    translate {
          field => "SeverityValue"
          destination => "[data_model][fields][severity]"
          override => "true"
          fallback => "unknown"
          dictionary => [
          "1","Debug",
          "2","Information",
          "3","Warning",
          "4","Error",
          "5","Critical"
           ]
    }
    mutate {
      add_field => {
        "[sensor][name]"=>"sysmon"
        #"received_at"=>"%{@timestamp}"
      }
      rename => {
        "[channel][0]" => "[data_model][fields][log_name]"
        "[winlog][user][domain]" => "[data_model][fields][fqdn]"
        "record_number" => "[data_model][fields][record_number]"
        "[winlog][computer_name]" => "[data_model][fields][hostname]"
      }
    }
    translate {
      field => "[event_id][0]"
      destination => "[data_model][object]"
      override => "true"
      fallback => "unknown"
      dictionary => [
        "1","process",
        "2","file",
        "3","flow",
        "4","sysmon",
        "5","process",
        "6","driver",
        "7","module",
        "8","thread",
        "9","raw_access",
        "10","process",
        "255","error"
      ]
    }

    translate {
      field => "[event_id][0]"
      destination => "[data_model][action]"
      override => "true"
      fallback => "unknown"
      dictionary => [
        "1","create",
        "2","attr_modify",
        "3","start",
        "4","change",
        "5","stop",
        "6","load",
        "7","load",
        "8","create",
        "9","read",
        "10","read",
        "255","error"
      ]
    }
    translate {
      field => "[event_id][0]"
      destination => "[type]"
      override => "true"
      fallback => "unknown"
      dictionary => [
        "1","sysmon_process",
        "2","sysmon_file",
        "3","sysmon_flow",
        "4","sysmon_sysmon",
        "5","sysmon_process",
        "6","sysmon_driver",
        "7","sysmon_module",
        "8","sysmon_thread",
        "9","sysmon_raw_access",
        "10","sysmon_process_access",
        "255","error"
      ]
    }
}
}

output {
  stdout {  }
  elasticsearch {
    hosts => ["192.168.122.4:9200"]
    index => "%{[@metadata][beat]}-%{[@metadata][version]}" 
  }
}
